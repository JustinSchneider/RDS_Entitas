//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class CubeEntity {

    static readonly ToSpawnComponent toSpawnComponent = new ToSpawnComponent();

    public bool isToSpawn {
        get { return HasComponent(CubeComponentsLookup.ToSpawn); }
        set {
            if (value != isToSpawn) {
                var index = CubeComponentsLookup.ToSpawn;
                if (value) {
                    var componentPool = GetComponentPool(index);
                    var component = componentPool.Count > 0
                            ? componentPool.Pop()
                            : toSpawnComponent;

                    AddComponent(index, component);
                } else {
                    RemoveComponent(index);
                }
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class CubeMatcher {

    static Entitas.IMatcher<CubeEntity> _matcherToSpawn;

    public static Entitas.IMatcher<CubeEntity> ToSpawn {
        get {
            if (_matcherToSpawn == null) {
                var matcher = (Entitas.Matcher<CubeEntity>)Entitas.Matcher<CubeEntity>.AllOf(CubeComponentsLookup.ToSpawn);
                matcher.componentNames = CubeComponentsLookup.componentNames;
                _matcherToSpawn = matcher;
            }

            return _matcherToSpawn;
        }
    }
}
